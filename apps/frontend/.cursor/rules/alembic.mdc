---
description: 
globs: 
alwaysApply: false
---
# Alembic: SQLAlchemy Database Migrations

Alembic is the standard database migration tool specifically designed for use with the SQLAlchemy Database Toolkit for Python. It allows you to manage incremental changes to your database schema in a structured and version-controlled way.

## 1. Key Concepts

*   **Migration:** A script representing a set of changes to the database schema (e.g., creating a table, adding a column).
*   **Revision:** A specific migration identified by a unique ID.
*   **Version Directory:** Contains individual migration script files (`versions/*.py`).
*   **Environment Script (`env.py`):** Configures how Alembic connects to your database and discovers your SQLAlchemy models.
*   **Configuration File (`alembic.ini`):** Main configuration for Alembic, including database connection details and script location.
*   **Autogenerate:** Alembic can compare your SQLAlchemy models to the current database state and automatically generate migration scripts for detected changes.

## 2. Installation

Install Alembic alongside SQLAlchemy:

```bash
pip install alembic
# Or if using uv
uv pip install alembic
```

## 3. Initialization

Initialize Alembic within your project repository. This creates the `alembic` directory structure and configuration files.

```bash
alembic init alembic
```

*   This creates `alembic.ini` and an `alembic/` directory containing `env.py`, `script.py.mako` (template for new migrations), and an empty `versions/` subdirectory.

**Configuration:**

*   **`alembic.ini`:** You **must** configure `sqlalchemy.url` with your database connection string.
    ```ini
    [alembic]
    # ... other settings ...
    script_location = alembic
    sqlalchemy.url = postgresql+psycopg2://user:password@host:port/dbname
    # Or: driver://user:password@host/database
    ```
*   **`alembic/env.py`:** This file needs to know about your SQLAlchemy models' metadata.
    *   Import your base declarative class or metadata object.
    *   Set the `target_metadata` variable within the `run_migrations_online()` function:
        ```python
        # alembic/env.py
        # Add near the top imports:
        from myapp.models import Base # Or however you import your Base/metadata
        # ...

        # In run_migrations_online():
        # ...
        target_metadata = Base.metadata # Assign your models' metadata here
        # ...
        ```

## 4. Creating Migrations

### 4.1 Autogenerate Migrations

This is the most common method. After changing your SQLAlchemy models (e.g., adding a `User.email` column), run:

```bash
alembic revision --autogenerate -m "Add email column to user table"
```

*   Alembic compares `target_metadata` (from `env.py`) to the database schema connected via `sqlalchemy.url`.
*   It generates a new file in `alembic/versions/` (e.g., `alembic/versions/1a2b3c4d5e6f_add_email_column_to_user_table.py`).
*   **Always review the generated script!** Autogenerate is powerful but not perfect. It might miss complex constraints, data type changes, or require manual adjustments for data migrations.

### 4.2 Manual Migrations

For changes Alembic can't autodetect (e.g., complex constraints, data migrations), create an empty migration file:

```bash
alembic revision -m "Populate user type based on email domain"
```

Then edit the generated file (e.g., `alembic/versions/abcdef123456_populate_user_type.py`) and add SQLAlchemy Core expression language or raw SQL using `op.execute()`:

```python
# alembic/versions/abcdef123456_populate_user_type.py
"""Populate user type based on email domain

Revision ID: abcdef123456
Revises: 1a2b3c4d5e6f
Create Date: ...
"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'abcdef123456'
down_revision: Union[str, None] = '1a2b3c4d5e6f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("UPDATE users SET user_type = 'admin' WHERE email LIKE '%@admin.com'")
    op.execute("UPDATE users SET user_type = 'standard' WHERE email NOT LIKE '%@admin.com'")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add logic to revert the data change if possible/necessary
    # Often, data migrations are irreversible or complex to downgrade.
    pass
    # ### end Alembic commands ###

```

## 5. Applying Migrations

Apply migrations to upgrade the database schema to the latest version:

```bash
alembic upgrade head
```

*   `head`: Refers to the latest revision in the `versions` directory.
*   You can upgrade/downgrade to specific revisions:
    *   `alembic upgrade +1`: Apply the next migration.
    *   `alembic downgrade -1`: Revert the last applied migration.
    *   `alembic upgrade <revision_id>`: Upgrade up to a specific revision.
    *   `alembic downgrade <revision_id>`: Downgrade down to a specific revision (stops *before* applying the target revision's downgrade).
    *   `alembic downgrade base`: Revert all migrations.

## 6. Common Commands

*   `alembic current`: Show the current revision applied to the database.
*   `alembic history`: Show the revision history.
*   `alembic show <revision_id>`: Show details about a specific revision.
*   `alembic stamp head`: Mark the database as having the latest revision applied, without actually running the migrations (useful for initial setup).
*   `alembic check`: Checks if the autogenerate process detects any differences between the models and the database (requires `target_metadata` to be set correctly in `env.py`). Returns exit code 0 if no differences, non-zero otherwise. Useful in CI.

## 7. Best Practices

*   **Version Control:** Commit your `alembic.ini`, `alembic/` directory (including `env.py` and `versions/`) to version control.
*   **Review Autogenerated Scripts:** Always carefully review scripts generated by `--autogenerate`.
*   **Atomic Migrations:** Keep migrations small and focused on a single logical change.
*   **Downgrade Paths:** Write meaningful `downgrade()` functions where possible, especially for schema changes. Data migrations might be harder or impossible to downgrade reliably.
*   **Branching:** Alembic supports migration branches, but it adds complexity. Use carefully if needed for parallel feature development affecting the schema.
*   **CI/CD:** Use `alembic check` in your CI pipeline to detect unmigrated model changes. Run `alembic upgrade head` during deployment.

For more detailed information, consult the official Alembic documentation: [https://alembic.sqlalchemy.org/](mdc:https:/alembic.sqlalchemy.org) 