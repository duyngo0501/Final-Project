---
description: 
globs: 
alwaysApply: false
---
# Supabase Authentication with Python (supabase-py)

This guide covers using the official `supabase-py` library to handle user authentication in your Python applications with Supabase.

## 1. Installation

Install the Supabase Python client library:

```bash
pip install supabase
# Or if using uv
uv pip install supabase
```

## 2. Initialization

Create a Supabase client instance using your project URL and anon key (found in your Supabase project settings: Project Settings > API).

```python
import os
from supabase import create_client, Client

url: str = os.environ.get("SUPABASE_URL")
key: str = os.environ.get("SUPABASE_KEY")

supabase: Client = create_client(url, key)
```

*   Store your URL and key securely (e.g., environment variables), not directly in code.
*   The `anon` key is safe to use in client-side applications. For server-side operations requiring elevated privileges, use the `service_role` key (with extreme caution).

## 3. User Sign Up

Register a new user with email and password.

```python
def sign_up_user(email, password):
    try:
        response = supabase.auth.sign_up({
            "email": email,
            "password": password,
            # You can add optional user metadata here
            # "options": {
            #     "data": {
            #         "first_name": "John",
            #         "age": 30,
            #     }
            # }
        })
        
        # Response structure depends on whether email confirmation is required
        user = response.user
        session = response.session # Session is None if email confirmation is required
        
        if user and not session:
             print(f"User created ({user.id}). Please check email ({user.email}) for confirmation.")
             return user
        elif user and session:
             print(f"User created ({user.id}) and logged in.")
             return user, session # Or just user, depending on your flow
        else:
            print("Sign up response did not contain expected user/session data.")
            return None
            
    except Exception as e:
        print(f"Error during sign up: {e}")
        # Handle specific Supabase/GoTrue errors if needed
        return None
```

*   **Email Confirmation:** By default, Supabase requires email confirmation. If enabled, the `session` in the response will be `None`, and the user needs to click the link in the confirmation email before they can sign in.
*   **User Metadata:** You can store custom data in the `auth.users` table via the `options.data` dictionary.

## 4. User Sign In

Log in an existing user.

### 4.1 Sign In with Email/Password

```python
def sign_in_user(email, password):
    try:
        response = supabase.auth.sign_in_with_password({
            "email": email, 
            "password": password
        })
        user = response.user
        session = response.session
        print(f"User {user.email} signed in successfully.")
        # Store the session securely for subsequent requests
        return session
    except Exception as e:
        print(f"Error during sign in: {e}")
        return None
```

### 4.2 Sign In with OAuth Provider

Redirect the user to the provider's authentication page.

```python
def sign_in_with_provider(provider_name):
    # provider_name e.g., 'google', 'github', 'azure'
    try:
        response = supabase.auth.sign_in_with_oauth({
            "provider": provider_name,
            # Optional: Specify a redirect URL after successful OAuth
            # "options": {
            #     "redirect_to": "http://localhost:3000/callback"
            # }
        })
        # This response contains the URL to redirect the user to.
        print(f"Redirect user to: {response.url}")
        return response.url
    except Exception as e:
        print(f"Error initiating OAuth sign in: {e}")
        return None
```

*   After the user authenticates with the provider, Supabase redirects them back to your application (typically to a callback route).
*   The session information is usually included in the URL fragment (`#access_token=...&refresh_token=...`). Your frontend needs to parse this and potentially send it to the backend or use `supabase.auth.set_session`.

### 4.3 Sign In with Phone/Password (Requires setup in Supabase Auth settings)

```python
def sign_in_with_phone(phone, password):
    try:
        response = supabase.auth.sign_in_with_password({
            "phone": phone, 
            "password": password
        })
        # ... handle response ...
    except Exception as e:
        print(f"Error during phone sign in: {e}")
        return None
```

## 5. Session Management

Supabase uses JWT (JSON Web Tokens) for sessions. The `supabase-py` client handles session refresh automatically by default if a valid refresh token is present.

### 5.1 Getting the Current Session

Retrieve the session currently managed by the client instance.

```python
def get_current_session():
    try:
        session = supabase.auth.get_session()
        if session:
            print(f"Current session user ID: {session.user.id}")
            # The access token is automatically refreshed if needed
            return session
        else:
            print("No active session found.")
            return None
    except Exception as e:
        print(f"Error getting session: {e}")
        return None
```

### 5.2 Setting the Session

If you obtain the `access_token` and `refresh_token` through other means (e.g., from frontend after OAuth callback), you can set the client's session manually.

```python
def set_session_manually(access_token, refresh_token):
    try:
        session = supabase.auth.set_session(access_token, refresh_token)
        print(f"Session set for user: {session.user.id}")
        return session
    except Exception as e:
        print(f"Error setting session: {e}")
        return None
```

### 5.3 Getting the Current User

Retrieve the user associated with the current session.

```python
def get_current_user():
    try:
        user = supabase.auth.get_user() # Fetches user based on current session's JWT
        if user:
            print(f"Current user: {user.user.email}") 
            return user.user
        else:
            print("No user associated with the current session.")
            return None
    except Exception as e:
        # This might happen if the token is invalid/expired and refresh fails
        print(f"Error getting user: {e}") 
        return None
```

## 6. User Sign Out

Invalidate the current session.

```python
def sign_out_user():
    try:
        supabase.auth.sign_out()
        print("User signed out successfully.")
        # Clear any locally stored session data
    except Exception as e:
        print(f"Error during sign out: {e}")
```

*   This invalidates the refresh token on the Supabase server.
*   The access token remains valid until it expires, but `get_user()` or `get_session()` with the old tokens will fail.

## 7. Server-Side Auth Validation (e.g., in APIs)

In backend APIs (like Flask/FastAPI), you typically receive the JWT (access token) in the `Authorization: Bearer <token>` header.

```python
from supabase import create_client, Client
# In your API endpoint:
def protected_route(auth_header: str):
    if not auth_header or not auth_header.startswith("Bearer "):
        # Handle missing/invalid header
        return {"error": "Unauthorized"}, 401
    
    jwt_token = auth_header.split(" ")[1]
    
    # Recreate a client instance per request or use a shared one
    url: str = os.environ.get("SUPABASE_URL")
    key: str = os.environ.get("SUPABASE_KEY")
    temp_supabase: Client = create_client(url, key)
    
    try:
        # Validate the token and get user info
        # This implicitly verifies the token against Supabase auth keys
        user_response = temp_supabase.auth.get_user(jwt_token)
        user = user_response.user
        
        print(f"Request authenticated for user: {user.email}")
        # Proceed with API logic, using user.id etc.
        return {"message": f"Hello {user.email}"}
        
    except Exception as e:
        # Token is invalid, expired, or another issue occurred
        print(f"Auth error: {e}")
        return {"error": "Invalid token or authentication failed"}, 401

```

*   `supabase.auth.get_user(jwt_token)` is the key method for validating the token provided by the client.

## 8. Further Reading

*   **supabase-py GitHub:** [https://github.com/supabase/supabase-py](mdc:https:/github.com/supabase/supabase-py)
*   **supabase-py Auth Reference:** [https://supabase.com/docs/reference/python/auth-api](mdc:https:/supabase.com/docs/reference/python/auth-api)
*   **Supabase Auth Docs:** [https://supabase.com/docs/guides/auth](mdc:https:/supabase.com/docs/guides/auth)
