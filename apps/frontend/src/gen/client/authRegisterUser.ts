/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/client'
import type { AuthRegisterUserMutationRequest, AuthRegisterUserMutationResponse, AuthRegisterUser422 } from '../types/AuthRegisterUser.ts'
import type { RequestConfig, ResponseErrorConfig } from '@/client'

function getAuthRegisterUserUrl() {
  return `/api/v1/auth/register` as const
}

/**
 * @description Register a new user.Checks if a user with the provided email already exists.If not, creates the new user and returns their data.Args:    db (Session): Database session dependency.    user_in (UserCreateSchema): User registration data (email, password).Raises:    HTTPException (400): If a user with the email already exists.Returns:    UserReadSchema: The newly created user's data.
 * @summary Register User
 * {@link /api/v1/auth/register}
 */
export async function authRegisterUser(
  data: AuthRegisterUserMutationRequest,
  config: Partial<RequestConfig<AuthRegisterUserMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<AuthRegisterUserMutationResponse, ResponseErrorConfig<AuthRegisterUser422>, AuthRegisterUserMutationRequest>({
    method: 'POST',
    url: getAuthRegisterUserUrl().toString(),
    data,
    ...requestConfig,
  })
  return res
}