/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { cartItemResponseSchemaSchema } from './cartItemResponseSchemaSchema.ts'
import { cartItemUpdateSchemaSchema } from './cartItemUpdateSchemaSchema.ts'
import { HTTPValidationErrorSchema } from './HTTPValidationErrorSchema.ts'
import { z } from 'zod'

export const cartUpdateCartItemQuantityPathParamsSchema = z.object({
  product_id: z.string().uuid(),
})

/**
 * @description Successful Response
 */
export const cartUpdateCartItemQuantity200Schema = z
  .lazy(() => cartItemResponseSchemaSchema)
  .describe(
    'Schema for representing a cart item in API responses.\n\nIncludes the unique ID of the cart item entry itself, in addition\nto base properties.\n\nAttributes:\n    id: The unique identifier (UUID) of this specific cart entry.\n    cart_id: The unique identifier (UUID) of the cart this item belongs to.\n    product_id: (Inherited) The UUID of the game product.\n    quantity: (Inherited) The number of units.',
  )

/**
 * @description Validation Error
 */
export const cartUpdateCartItemQuantity422Schema = z.lazy(() => HTTPValidationErrorSchema)

export const cartUpdateCartItemQuantityMutationRequestSchema = z
  .lazy(() => cartItemUpdateSchemaSchema)
  .describe(
    'Schema for data needed when updating the quantity of an existing cart item.\n\nAttributes:\n    quantity: The new quantity for the item (must be greater than 0).',
  )

export const cartUpdateCartItemQuantityMutationResponseSchema = z.lazy(() => cartUpdateCartItemQuantity200Schema)